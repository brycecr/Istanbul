/*
 * File: Instakilo.java
 * ---------------------
 * Reference implementation (in progress) for Instakilo.
 */

import java.awt.event.ActionEvent;
import java.io.*;
import java.util.*;
import javax.swing.*;

import acm.graphics.*;
import acm.program.GraphicsProgram;
import acm.util.ErrorException;

public class Instakilo extends GraphicsProgram implements IKConstants {

	private HashMap<String, ArrayList<String>> data = new HashMap<String, ArrayList<String>>();
	private String currProfile = null;
	private JTextArea nameInput = new JTextArea();
	private JTextArea newPhotoName = new JTextArea();

	public void run() {

		data = loadMap(DATAFILE);
		if (data == null) {
			displayMessage("Error reading configuration file");
		}
		addInteractors();
	}

	private void createNewProfile(String name) {
		data.put(name, new ArrayList<String>());
		saveMap(data);
	}

	//Graphics
	private void addInteractors() {

		JButton displayButton = new JButton("Display");
		JButton newProfileButton = new JButton("Create");
		JButton newPhotoButton = new JButton("Post");
		JButton clearButton = new JButton("Clear");

		add(new JLabel("Profile:"), WEST);
		add(nameInput, WEST);
		add(displayButton, WEST);
		add(newProfileButton, WEST);

		add(new JLabel("Photo:"), WEST);
		add(new JLabel("New photo name:"), WEST);
		add(newPhotoName, WEST);
		add(newPhotoButton, WEST);

		add(clearButton, WEST);

		addActionListeners();
		displayButton.addActionListener(this);
		newProfileButton.addActionListener(this);

		//TODO HACK!
		if (newPhotoButton.getActionListeners().length < 1) {
			newPhotoButton.addActionListener(this);
		}
	}

	private void displayMessage(String text) {
		GLabel msg = new GLabel(text);
		msg.setFont(MESSAGE_FONT);
		add(msg, LEFT_MARGIN, TOP_MARGIN + msg.getAscent());


	}

	private void displayProfile(String name) {

		currProfile = name;
		removeAll();

		if (data.containsKey(name)) {
			ArrayList<String> photos = data.get(name);

			//display profile name
			GLabel profileName = new GLabel(name);
			profileName.setFont(PROFILE_NAME_FONT);
			add(profileName, LEFT_MARGIN, TOP_MARGIN + profileName.getAscent());

			//display images
			double y = profileName.getY() + NAME_IMAGE_MARGIN;
			double x = LEFT_MARGIN;

			int rowHeight = 0;
			for (String photo : photos) {
				GImage image = new GImage(photo);

				if (image != null) {

					//TODO doesn't account for width of interactors bar?
					if (APPLICATION_WIDTH - x - IMAGE_IMAGE_MARGIN < image.getWidth()) {
						//image doesn't fit on the current line
						//start a new line of images

						y += rowHeight + IMAGE_IMAGE_MARGIN; 
						rowHeight = 0;
						x = LEFT_MARGIN;
					}

					rowHeight = (int) ((int) Math.max(rowHeight, image.getHeight()));
					add(image, x, y);

					x += IMAGE_IMAGE_MARGIN + image.getWidth(); 
				}
			}

		} else {
			currProfile = null;
			displayMessage("A profile for " + name + " was not found");
		}
	}


	//TODO add extension to detect "enter" key press or print messages if fields are empty
	public void actionPerformed(ActionEvent e) {
		String command = e.getActionCommand();
		if(command.equals("Display")) {
			displayProfile(nameInput.getText());
		} else if(command.equals("Create")) {
			String name = nameInput.getText();
			createNewProfile(name);
			displayProfile(name);
		} else if(command.equals("Post")) {
			if (currProfile == null) {
				displayMessage("Please pick a profile first");
				return;
			}
			String photo = newPhotoName.getText();
			if (photoExists(photo)) {
				data.get(currProfile).add(photo);

				saveMap(data);
				displayProfile(currProfile);
			}
		} else if(command.equals("Clear")) {
			if(currProfile == null) {
				displayMessage("Please pick a profile first");
				return;
			}
			data.put(currProfile, new ArrayList<String>());
			displayProfile(name);
		}
	}

	/****** PROVIDE TO STUDENTS *******/

	private boolean photoExists(String imageFilename) {
		boolean exists = true;
		try{
			new GImage(imageFilename);
		} catch(ErrorException e) {
			exists = false;		}
		return exists;
	}

	private void saveMap(HashMap<String, ArrayList<String>> dataMap) {
		try {
			BufferedWriter writer = new BufferedWriter(new FileWriter(DATAFILE));
			for (String name : data.keySet()) {
				writer.write(name + "\n");
				ArrayList<String> photos = data.get(name);
				if (photos == null) {
					println("Why is the arraylist of photos for " + name + "null?");
				} else {
					for (String p : data.get(name)) {
						writer.write(p + "\n");
					}
					writer.write("\n");
				}
			}

			writer.write("\n"); // TODO extra line?
			writer.close();
		} catch (IOException e) {
			println("Error saving file");
			e.printStackTrace();
			return;
		}
	}

	private HashMap<String, ArrayList<String>> loadMap(String filename)  {
		HashMap<String, ArrayList<String>> dataMap = new HashMap<String, ArrayList<String>>(); 
		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(filename));


			String name = null;
			ArrayList<String> photos = null;
			while(true) {
				String line = reader.readLine();
				if(line == null) break;

				if(line.isEmpty()) { //end of a profile's data
					dataMap.put(name, photos);
					name = null;
					photos = null;
				} else if (name == null) { //new profile data
					name = line;
					photos = new ArrayList<String>();
				} else { //photo data
					photos.add(line);
				}
			}

			reader.close();
		} catch (IOException e) {
			return null;
		}
		return dataMap;
	}

}

