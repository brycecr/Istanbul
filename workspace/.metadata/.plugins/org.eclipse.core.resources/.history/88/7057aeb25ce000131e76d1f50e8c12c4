/*
 * File: Instakilo.java
 * ---------------------
 * Reference implementation (in progress) for Instakilo.
 */

import java.awt.event.ActionEvent;
import java.io.*;
import java.util.*;
import javax.swing.*;

import acm.graphics.*;
import acm.program.GraphicsProgram;
import acm.util.ErrorException;

public class Instakilo extends GraphicsProgram implements IKConstants {

	private HashMap<String, ArrayList<String>> data = new HashMap<String, ArrayList<String>>();
	private String currProfileName = null;
	private JTextArea nameInput = new JTextArea();
	private JTextArea newPhotoName = new JTextArea();
	private FileSystem fileSystem = new FileSystem();

	public void run() {
		data = fileSystem.loadMap(DATAFILE_NAME);
		if (data == null) {
			displayMessage("Error reading configuration file");
		}
		addInteractors();
	}

	private void createNewProfile(String name) {
		data.put(name, new ArrayList<String>());
		fileSystem.saveMap(data, DATAFILE_NAME);
	}

	//Graphics
	private void addInteractors() {

		JButton displayButton = new JButton("Display");
		JButton newProfileButton = new JButton("Create");
		JButton newPhotoButton = new JButton("Post");
		JButton clearButton = new JButton("Clear");

		add(new JLabel("Profile:"), WEST);
		add(nameInput, WEST);
		add(displayButton, WEST);
		add(newProfileButton, WEST);

		add(new JLabel("Photo:"), WEST);
		add(new JLabel("New photo name:"), WEST);
		add(newPhotoName, WEST);
		add(newPhotoButton, WEST);

		add(clearButton, WEST);

		addActionListeners();
		displayButton.addActionListener(this);
		newProfileButton.addActionListener(this);

		//TODO HACK!
		if (newPhotoButton.getActionListeners().length < 1) {
			newPhotoButton.addActionListener(this);
		}
	}

	private void displayMessage(String text) {
		GLabel msg = new GLabel(text);
		msg.setFont(MESSAGE_FONT);
		add(msg, LEFT_MARGIN, TOP_MARGIN + msg.getAscent());


	}

	private void displayProfile(String name) {

		currProfileName = name;
		removeAll();

		if (data.containsKey(name)) {
			ArrayList<String> photos = data.get(name);

			//display profile name
			GLabel profileName = new GLabel(name);
			profileName.setFont(PROFILE_NAME_FONT);
			add(profileName, LEFT_MARGIN, TOP_MARGIN + profileName.getAscent());

			//display images
			double y = profileName.getY() + NAME_IMAGE_MARGIN;
			double x = LEFT_MARGIN;

			int rowHeight = 0;
			for (String photo : photos) {
				GImage image = new GImage(photo);

				if (image != null) {

					scaleImage(image);
					
					//TODO doesn't account for width of interactors bar?
					if (APPLICATION_WIDTH - x - IMAGE_IMAGE_MARGIN < image.getWidth()) {
						//image doesn't fit on the current line
						//start a new line of images

						y += rowHeight + IMAGE_IMAGE_MARGIN; 
						rowHeight = 0;
						x = LEFT_MARGIN;
					}

					rowHeight = (int) ((int) Math.max(rowHeight, image.getHeight()));
					add(image, x, y);

					x += IMAGE_IMAGE_MARGIN + image.getWidth(); 
				}
			}

		} else {
			currProfileName = null;
			displayMessage("A profile for " + name + " was not found");
		}
	}


	private void scaleImage(GImage image) {
		double amount = image.getHeight() / ROW_HEIGHT;
		image.scale(amount);
		
	}

	//TODO add extension to detect "enter" key press or print messages if fields are empty
	public void actionPerformed(ActionEvent e) {
		String command = e.getActionCommand();
		if(command.equals("Display")) {
			displayProfile(nameInput.getText());
		} else if(command.equals("Create")) {
			String name = nameInput.getText();
			createNewProfile(name);
			displayProfile(name);
		} else if(command.equals("Post")) {
			if (currProfileName == null) {
				displayMessage("Please pick a profile first");
				return;
			}
			String photo = newPhotoName.getText();
			if (fileSystem.photoExists(photo)) {
				data.get(currProfileName).add(photo);

				fileSystem.saveMap(data, DATAFILE_NAME);
				displayProfile(currProfileName);
			}
		} else if(command.equals("Clear")) {
			if(currProfileName == null) {
				displayMessage("Please pick a profile first");
				return;
			}
			data.put(currProfileName, new ArrayList<String>());
			//fileSystem.saveMap(data, DATAFILE_NAME);
			displayProfile(currProfileName);
		}
	}

}

